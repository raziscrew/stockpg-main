@page
<head>
    <script defer src="/css/all.js"></script> <!--load all styles -->

</head>
@using JPGStockServer.Entities


<h2 class="content-block">DIODE</h2>


        @(Html.DevExtreme().DataGrid<Stock>()
    .ID("gridDiode")
    .ElementAttr(new { @class = "dx-card wide-card" })
    // .Selection(s => s.Mode(SelectionMode.Single))
    .FocusedRowEnabled(true)
      // .FocusedRowIndex(0)
      .OnFocusedRowChanged("onFocusedRowChanged")
    // .OnContentReady(@<text> function(e) {if(!e.component.getSelectedRowKeys().length) e.component.selectRowsByIndexes(0);} </text>)
    .ShowBorders(false)
   // .ShowColumnLines(true)
   .RowAlternationEnabled(true)

   .FilterPanel(f => f.Visible(true))
    .FilterRow(f => f.Visible(true).ApplyFilter(GridApplyFilterMode.Auto))
    //.FilterRow(f => f.Visible(true))
    .ColumnAutoWidth(true)
    .ColumnHidingEnabled(true)
    .Paging(paging => paging.Enabled(true))
    .Editing(e => e.Mode(GridEditMode.Popup)

        .Popup(p => p
        .ID("popupIfLoginDiode")
        //.ShowTitle(true)
        .CloseOnOutsideClick(true)
        .Width(500)
        .Height(500)
        .Position(pos => pos
        .My(HorizontalAlignment.Center, VerticalAlignment.Center)
        .At(HorizontalAlignment.Center, VerticalAlignment.Center)
        .Of("#window")
    ))


        .Form(f => f.Items(items => {

            items.AddSimpleFor(m => m.PART_NUMBER)
            .IsRequired(true);
            items.AddSimpleFor(m => m.PACKAGING)
            .IsRequired(true);
            items.AddSimpleFor(m => m.LOCATION)
            .IsRequired(true);
            items.AddSimpleFor(m => m.VOLTAGE)
            .IsRequired(true);
            items.AddSimpleFor(m => m.AMPERE)
            .IsRequired(true);
            items.AddSimpleFor(m => m.WATT)
           .IsRequired(true);
            items.AddSimpleFor(m => m.TYPE)
           .IsRequired(true);
            items.AddSimpleFor(m => m.QUANTITY)
            .Editor(e => e
                    .NumberBox()
                )
            .IsRequired(true);


        }))
        .Texts(t => t
        .ConfirmDeleteMessage("Are you sure you want to delete ? ")

         )

    //.AllowAdding(true)
    //.AllowDeleting(true)
    //.AllowUpdating(true)
    )

    .OnRowUpdating(@<text>
function(e) {  for (var property in e.oldData) {
      if (!e.newData.hasOwnProperty(property)) {
        e.newData[property] = e.oldData[property];
      }
    }}
</text>)
    .Columns(columns =>
    {

        columns.Add().DataField("PART_NUMBER")
        .Alignment(HorizontalAlignment.Center);
        columns.Add().DataField("QUANTITY")
          .HidingPriority(5)
          .Alignment(HorizontalAlignment.Center);
        columns.Add().DataField("PACKAGING")
            .HidingPriority(4)
             .Alignment(HorizontalAlignment.Center);
        columns.Add().DataField("VOLTAGE")
            .HidingPriority(1)
            .Alignment(HorizontalAlignment.Center);
        columns.Add().DataField("AMPERE")
            .HidingPriority(2)
            .Alignment(HorizontalAlignment.Center);
        columns.Add().DataField("WATT")
            .HidingPriority(0)
            .Alignment(HorizontalAlignment.Center);
        columns.Add().DataField("TYPE")
            .HidingPriority(3)
            .Alignment(HorizontalAlignment.Center);
        columns.Add().DataField("LOCATION")
                .Visible(false);


    })

     //.RtlEnabled(true)
     .StateStoring(s => s
        .Enabled(true)
        .Type(StateStoringType.LocalStorage)
        .StorageKey("storageDiode")
    )
    .Paging(p => p.PageSize(10))
    .Pager(p => p
        .ShowPageSizeSelector(true)
        .AllowedPageSizes(new[] { 5, 10, 20 })
        .ShowInfo(true)
    )
    
    .OnContentReady("DataDoneDiode")
    )
        <div id="action-removeDiode"></div>
        <div id="action-editDiode"></div>

        @(Html.DevExtreme().SpeedDialAction()
    .ID("action-add-Diode")
    .Icon("add")
    .Visible(false)
    .Label("Add row")
    .Index(1)
    .OnClick("addRowDiode")
)
        @(Html.DevExtreme().SpeedDialAction()
    .ID("action-removeDiode")
    .Icon("trash")
    .Visible(false)
    .Label("Delete row")
    .Index(2)
    .OnClick("deleteRowDiode")
)
        @(Html.DevExtreme().SpeedDialAction()
    .ID("action-editDiode")
    .Icon("edit")
    .Visible(false)
    .Label("Edit row")
    .Index(3)
    .OnClick("editRowDiode")
)
        @(Html.DevExtreme().SpeedDialAction()
    .ID("action-TakeDiode")
    .Icon("edit")
    .Visible(false)
    .Label("Take")
    .Index(3)
    .OnClick("TakeDiode")
)
        @(Html.DevExtreme().Popup()
     .ShowTitle(true)
     .Title("Login")
     .ContentTemplate(@<text>
<div class="form">
    <div class="dx-fieldset">
        <div class="dx-field">
            <div class="dx-field-label">Usernames</div>
            <div class="dx-field-value">
                @(Html.DevExtreme().TextBox()
                    .ID("USERNAMEDiode")
                   .Placeholder("Enter Username here...")
                  //  .ValueChangeEvent("keyup")

                )

            </div>
        </div>
        <div class="dx-field">
            <div class="dx-field-label">Passwords</div>
            <div class="dx-field-value">
                @(Html.DevExtreme().TextBox()
                    .ID("PASSWORDDiode")
                    .Mode(TextBoxMode.Password)
                    .Placeholder("Enter Password here...")
                    .OnValueChanged("showeye")
                     .ValueChangeEvent("keyup")
                     .Buttons(buttons =>
                     {
                buttons.Add()
                .Name("show_passwordDiode")
                .Location(TextEditorButtonLocation.After)
                .Widget(w => w.Button()
                    .ID("show_passwordDiode")
                    .Visible(false)
                    .Type(ButtonType.Normal)
                    .StylingMode(ButtonStylingMode.Text)
                    .Icon("fas fa-eye")
                    .OnClick("show_passwordDiode"));

                buttons.Add()
                .Name("hide_passwordDiode")
                .Location(TextEditorButtonLocation.After)
                .Widget(w => w.Button()
                    .ID("hide_passwordDiode")
                    .Visible(false)
                    .Icon("fas fa-eye-slash")
                    .OnClick("hide_passwordDiode"));
        })


                )
            </div>
        </div>
    </div>
</div>

</text>).ID("LoginPopupDiode")
.ToolbarItems(toolbarItems =>
{
    toolbarItems.Add()

    .Location(ToolbarItemLocation.After)
    .Toolbar(Toolbar.Bottom)
                .Widget(w => w
                   .Button()
                   .Text("Close")

                   .OnClick(@<text>function() {  $("#LoginPopupDiode").dxPopup("hide")}</text>)
                );
    toolbarItems.Add()

    .Location(ToolbarItemLocation.Center)
    .Toolbar(Toolbar.Bottom)
                .Widget(w => w
                   .Button()
                   .Text("Login")
                    .ID("loginbtnDiode")
                   .OnClick("loginDiode")
                );
})
.Height(350)
.Width(364)
)
        @(Html.DevExtreme().Popup()
    .OnShowing("LoginpopupStateDiode")
    .OnHidden("LoginpopupStateHiddenDiode")
    .ShowTitle(false)

    .ContentTemplate(@<text>

<div class="form">
    <div class="dx-fieldset">
         <div class="dx-field">

            <div class="dx-field-value">
                @(Html.DevExtreme().NumberBox()
                    .ID("QuantityDiode")
                    .Value(null)
                    .Placeholder("How many you like to take?")
                    .ValueChangeEvent("keyup")
                 //   .OnValueChanged("TakeQuantity")
                    .Width("204")

                )



            </div>
         </div>
    </div>
 </div>
</text>).ID("Take-popupDiode")
.ToolbarItems(toolbarItems =>
{
    toolbarItems.Add()

    .Location(ToolbarItemLocation.After)
    .Toolbar(Toolbar.Bottom)
                .Widget(w => w
                   .Button()
                   .Text("Close")

                   .OnClick(@<text>function() {  $("#Take-popupDiode").dxPopup("hide")}</text>)
                );
    toolbarItems.Add()

    .Location(ToolbarItemLocation.Center)
    .Toolbar(Toolbar.Bottom)
                .Widget(w => w
                   .Button()
                   .Text("Take")

                   .OnClick("UpdateQuantityDiode")
                );
})

//.OnContentReady("datar")
.Height(196)
.Width(300)

)





        <script>


            //#region Show eye icon on password textbox


            function showeye() {
                var pass = $("#PASSWORDDiode").dxTextBox("instance").option("value")
                var passwordEditor = $("#PASSWORDDiode").dxTextBox("instance");
                var passCondition = passwordEditor.option("mode")
                if (pass != "" && passCondition === "password") {
                    $("#show_passwordDiode").dxButton("instance").option("visible", true);
                }
                else if (pass != "" && passCondition === "text") {

                    $("#hide_passwordDiode").dxButton("instance").option("visible", true);
                }
                else {

                    $("#show_passwordDiode").dxButton("instance").option("visible", false);
                    $("#hide_passwordDiode").dxButton("instance").option("visible", false);
                }
            }

            function show_passwordDiode() {
                var passwordEditor = $("#PASSWORDDiode").dxTextBox("instance");
                passwordEditor.option("mode", passwordEditor.option("mode") === "text" ? "password" : "text");

                $("#show_passwordDiode").dxButton("instance").option("visible", false);
                $("#hide_passwordDiode").dxButton("instance").option("visible", true);

            }

            function hide_passwordDiode() {
                var passwordEditor = $("#PASSWORDDiode").dxTextBox("instance");

                passwordEditor.option("mode", passwordEditor.option("mode") === "text" ? "password" : "text");
                $("#show_passwordDiode").dxButton("instance").option("visible", true);
                $("#hide_passwordDiode").dxButton("instance").option("visible", false);

            }


            //#endregion



            //#region Popuplogin state If take not Login


            function DataDoneDiode() {
                var GetloginpopupstateOptocoupler = sessionStorage.getItem("PopUploginStateDiode");
                if (GetloginpopupstateOptocoupler === "show") {
                    $("#Take-popupDiode").dxPopup("show")

                } else {
                    $("#Take-popupDiode").dxPopup("hide")
                }

            }

            function LoginpopupStateHiddenDiode(e) {
                sessionStorage.setItem("PopUploginStateDiode", "hide");


            }

            function LoginpopupStateDiode(e) {

                sessionStorage.setItem("PopUploginStateDiode", "show");

            }


            //#endregion


            //#region Add Update edit delete floatingActionButton

            function onFocusedRowChanged(e) {

                focusedRowKey = e.component.option("focusedRowIndex");
                // $("#action-TakeDiode").dxSpeedDialAction("instance").option("visible", true)
                selectedRowIndex = e.component.getRowIndexByKey(focusedRowKey);
                if (sessionStorage.getItem("Token") != null) {
                    $("#action-TakeDiode").dxSpeedDialAction("instance").option("visible", true)
                }




            }

            var getGridInstance = function () {
                return $("#gridDiode").dxDataGrid("instance");
            }

            var addRowDiode = function () {
                getGridInstance().addRow();
                getGridInstance().deselectAll();
            }
            var deleteRowDiode = function () {
                getGridInstance().deleteRow(focusedRowKey);
                getGridInstance().deselectAll();
            }
            var editRowDiode = function () {
                getGridInstance().editRow(focusedRowKey);
                getGridInstance().deselectAll();
            }

            var TakeDiode = function (e) {
                $("#Take-popupDiode").dxPopup("show")
            }


            $(function () {

            //    var applyFilterTypes = [{
            //        key: "auto",
            //        name: "Immediately"
            //    }, {
            //        key: "onClick",
            //        name: "On Button Click"
            //    }];

            //    var applyFilterModeEditor = $("#useFilterApplyButton").dxSelectBox({
            //        items: applyFilterTypes,
            //        value: applyFilterTypes[0].key,
            //        valueExpr: "key",
            //        displayExpr: "name",
            //        onValueChanged: function (data) {
            //            dataGrid.option("filterRow.applyFilter", data.value);
            //        }
            //    }).dxSelectBox("instance");

                if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {
                    //document.write("mobile");
                        $("#gridDiode").dxDataGrid({

                        filterRow: {
                            visible: true,
                            applyFilter: "onClick"
                        }
                    });

                } 

               


                //var vw = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);

                //if (vw <= 480) {

                //    $("#gridDiode").dxDataGrid({

                //        filterRow: {
                //            visible: true,
                //            applyFilter: "onClick"
                //        }
                //    });


                //} else {
                //    $("#gridDiode").dxDataGrid({

                //        filterRow: {
                //            visible: true,

                //        }
                //    });
                //}

                //$(window).on('resize', function () {
                //    vw = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);

                //    if (vw <= 480) {
                //        $("#gridDiode").dxDataGrid({
                //            // ...
                //            filterRow: {
                //                visible: true,
                //                applyFilter: "onClick"
                //            }
                //        });
                //    } else {
                //        $("#gridDiode").dxDataGrid({

                //            filterRow: {
                //                visible: true,

                //            }
                //        });
                //    }
                //});






                var today = moment().format('YYYY-MM-DDTHH:mm:ss');

                var ordersStore = new DevExpress.data.CustomStore({
                    key: "STOCK_ID",

                    load: function () {
                        return sendRequest("/api/Diode");
                    },
                    insert: function (values) {
                        return sendRequest("/api/Diode", "POST", {
                            "PART_NUMBER": values.PART_NUMBER,
                            "PACKAGING": values.PACKAGING,
                            "VOLTAGE": values.VOLTAGE,
                            "AMPERE": values.AMPERE,
                            "WATT": values.WATT,
                            "TYPE": values.TYPE,
                            "LOCATION": values.LOCATION,
                            "IGNORE": 0,
                            "QUANTITY": values.QUANTITY,
                            "COMPONENTS_ID": "DIODE",
                            "User": sessionStorage.getItem("Username"),
                            "CreateDate": today,
                            "UpdateDate": today
                        });
                    },
                    update: function (key, values) {
                        return sendRequest("/api/Diode/Update/" + key, "PUT", {
                            "STOCK_ID": key,
                            "PART_NUMBER": values.PART_NUMBER,
                            "PACKAGING": values.PACKAGING,
                            "VOLTAGE": values.VOLTAGE,
                            "AMPERE": values.AMPERE,
                            "WATT": values.WATT,
                            "TYPE": values.TYPE,
                            "LOCATION": values.LOCATION,
                            "QUANTITY": parseInt(values.QUANTITY),
                            "IGNORE": 0,
                            "User": sessionStorage.getItem("Username"),
                            "UpdateDate": today
                        });
                    },
                    remove: function (key) {
                        return sendRequest("/api/Diode/" + key, "DELETE", {
                            key: key
                        });
                    }
                });

                var dataGrid = $("#gridDiode").dxDataGrid({
                    dataSource: ordersStore,

                }).dxDataGrid("instance");

                $("#refresh-mode").dxSelectBox({
                    items: ["full", "reshape", "repaint"],
                    value: "reshape",
                    onValueChanged: function (e) {
                        dataGrid.option("editing.refreshMode", e.value);
                    }
                });

                $("#clear").dxButton({
                    text: "Clear",
                    onClick: function () {
                        $("#requests ul").empty();
                    }
                });

                function sendRequest(url, method, data) {
                    var d = $.Deferred();

                    method = method || "GET";

                    logRequest(method, url, data);

                    $.ajax(url, {
                        method: method || "GET",
                        // data: data,
                        data: JSON.stringify(data),
                        cache: true,
                        headers: {
                            "DataType": "json",
                            "Authorization": "Bearer " + sessionStorage.getItem("Token"),
                            "Content-Type": "application/json"
                        },
                        statusCode: {
                            401: function () {
                                var role = sessionStorage.getItem("Role");
                                if (role == null) {
                                    $("#Take-popupDiode").dxPopup("hide");
                                    $("#LoginPopupDiode").dxPopup("show")
                                }



                            },
                            200: function () {

                                if (method === "POST") {
                                    DevExpress.ui.notify({
                                        message: "Success Add New Diode",
                                        position: { my: "top", at: "top", of: $("#Windows") },
                                        width: 300,
                                        shading: false
                                    }, "Success", 5000);
                                }



                            },
                            204: function () {
                                var GetloginpopupstateOptocoupler = sessionStorage.getItem("PopUploginStateDiode");
                                if (GetloginpopupstateOptocoupler === "show" && method === "PUT") {

                                    var PARTNUMBER = dataGrid.cellValue(focusedRowKey, "PART_NUMBER");
                                    var LOCATION = dataGrid.cellValue(focusedRowKey, "LOCATION");
                                    sessionStorage.setItem("PopUploginStateDiode", "hide");
                                    $("#Take-popupDiode").dxPopup("hide");
                                    var myDialog = DevExpress.ui.dialog.custom({
                                        title: "Thanks for Update",
                                        messageHtml: "Your item " + PARTNUMBER + " Location is : " + LOCATION,
                                        buttons: [{ text: "Close now" }]
                                    });
                                    myDialog.show();

                                }
                                else if (method === "PUT") {
                                    var PARTNUMBER = dataGrid.cellValue(focusedRowKey, "PART_NUMBER");
                                    DevExpress.ui.notify({
                                        message: "Success Update " + PARTNUMBER,
                                        position: { my: "top", at: "top", of: $("#Windows") },
                                        width: 300,
                                        shading: false
                                    }, "Success", 5000);
                                }
                                else if (method === "DELETE") {
                                    var PARTNUMBER = dataGrid.cellValue(focusedRowKey, "PART_NUMBER");
                                    DevExpress.ui.notify({
                                        message: "Success Delete " + PARTNUMBER,
                                        position: { my: "top", at: "top", of: $("#Windows") },
                                        width: 300,
                                        shading: false
                                    }, "Success", 5000);
                                }

                            }
                        }

                    }).done(function (result) {
                        d.resolve(method === "GET" ? result.data : result);
                    }).fail(function (xhr) {
                        var response = xhr.responseJSON;


                        if (xhr.status == 400) {
                            $.each(response.errors, function (fieldName, errorBag) {
                                //output the fieldname for this error
                                console.log(fieldName);

                                // output each error message for this field
                                $.each(errorBag, function (i, message) {
                                    DevExpress.ui.notify(message);
                                    //d.reject(message);
                                    //$("#my-popup").dxPopup("show")
                                });
                            });
                        }

                    });


                    return d.promise();
                }

                function logRequest(method, url, data) {
                    var args = Object.keys(data || {}).map(function (key) {
                        return key + "=" + data[key];
                    }).join(" ");

                    var logList = $("#requests ul"),
                        time = DevExpress.localization.formatDate(new Date(), "HH:mm:ss"),
                        newItem = $("<li>").text([time, method, url.slice(URL.length), args].join(" "));

                    logList.prepend(newItem);
                }
                var role = sessionStorage.getItem("Role");




                if (role == "Admin") {
                    $("#action-add-Diode").dxSpeedDialAction("instance").option("visible", true);
                    $("#action-removeDiode").dxSpeedDialAction("instance").option("visible", true);
                    $("#action-editDiode").dxSpeedDialAction("instance").option("visible", true);

                }


                /*floatingActionButton location setting*/

                DevExpress.config({
                    floatingActionButtonConfig: {
                        icon: "rowfield",
                        position: {
                            my: "right bottom",
                            at: "right bottom",
                            of: "#app-container",
                            offset: "-16 -16"
                        }
                    }
                });
            });




            //#endregion



            //#region UpdateQuantity


            var UpdateQuantityDiode = function () {
                var dataGrid = $("#gridDiode").dxDataGrid("instance");
                var OriQuantitys = dataGrid.cellValue(focusedRowKey, "QUANTITY");
                var Quantitys = $("#QuantityDiode").dxNumberBox("instance").option("value")

                var result = DevExpress.ui.dialog.confirm("Are you sure only " + Quantitys + " you take?", "Confirm Take");

                result.done(function (dialogResult) {

                    if (dialogResult == true) {

                        if (OriQuantitys < Quantitys) {
                            DevExpress.ui.notify("Quantity invalid");
                        }
                        else {
                            var TakeQuentitys = OriQuantitys - Quantitys;
                            dataGrid.cellValue(focusedRowKey, "QUANTITY", TakeQuentitys);
                            dataGrid.saveEditData();

                        }




                    }
                });

                //  DevExpress.ui.notify("Quantity" + Quantitys);




            }



            //#endregion



            //#region Login


            function loginDiode() {

                var user = $("#USERNAMEDiode").dxTextBox("instance").option("value")
                var pass = $("#PASSWORDDiode").dxTextBox("instance").option("value")

                var settings = {

                    "url": "/users/authenticate",
                    "method": "POST",
                    "timeout": 0,
                    "headers": {

                        "Content-Type": "application/json"
                    },
                    statusCode: {

                        200: function () {
                            //$("#LoginPopupDiode").dxPopup("hide");
                            //$("#Take-popupDiode").dxPopup("show");
                            sessionStorage.setItem("PopUploginStateDiode", "show");
                            //$("#Take-popupDiode").dxPopup("hide");
                            //$("#LoginPopupDiode").dxPopup("show")
                            window.location.href = window.location;
                        }
                    },
                    "data": JSON.stringify({ "username": user, "password": pass }),

                };


                $.ajax(settings).done(function (data) {


                    sessionStorage.setItem("Token", data.Token);
                    sessionStorage.setItem("Role", data.Role);
                    sessionStorage.setItem("Username", data.Username);

                    DevExpress.ui.notify({
                        message: "Success Login, Hello! " + sessionStorage.getItem("Username"),
                        position: { my: "top", at: "top", of: $('#Windows') },
                        width: 300,
                        shading: false
                    }, "Success", 5000);


                })
                    .fail(function (data) {
                        //var pass = $("#Passwordss")
                        //    .dxTextBox("instance")
                        //    .option("value")
                        //  DevExpress.ui.notify("Warning message", "warning", 500);
                        // DevExpress.ui.notify("value:" + pass + user);
                        DevExpress.ui.notify({
                            message: "Username or Password is invalid",
                            position: { my: "top", at: "top", of: $('#Windows') },
                            width: 300,
                            shading: false
                        }, "error", 5000);

                        //window.location.href = window.location;



                    });








            }



              //#endregion




        </script>
